{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "semgrep",
          "informationUri": "https://semgrep.dev"
        }
      },
      "results": [
        {
          "fingerprints": {
            "matchBasedId/v1": "c09e76ee0bbd8660190d630f2105302ac9ebdc1bbaa28a725499d0f6793cd7810eed660f0bbff69f7913d4863c28c3dfbc21988dca080aaa1a37b24c844a4b44_0"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/home/arjun/juice-shop/frontend/src/app/search-result/search-result.component.ts",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 75,
                  "endLine": 151,
                  "snippet": {
                    "text": "      this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam) // vuln-code-snippet vuln-line localXssChallenge xssBonusChallenge"
                  },
                  "startColumn": 65,
                  "startLine": 151
                }
              }
            }
          ],
          "message": {
            "text": "Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. Validate the user input, perform contextual output encoding, or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when rendering input."
          },
          "properties": {},
          "ruleId": "typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust"
        }
      ]
    }
  ]
}